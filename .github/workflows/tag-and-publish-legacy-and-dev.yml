name: Tag and Publish Legacy and Dev Versions (v0, v1, ...)

# 🔁 Trigger on push of any v1.x.x or v1.x.x-alpha.x tag (can extend to v0, v2, v3 later)
on:
  push:
    tags:
      - 'v1.*'
      - 'v0.*'   # uncomment later if/when you publish v0 tags here too
      # - 'v2.*'   # future-proof

jobs:
  publish:
    name: Publish tagged version to NPM and GitHub
    runs-on: ubuntu-latest

    steps:
      # ✅ Checkout tagged commit
      - uses: actions/checkout@v4

      # ✅ Setup Node.js and NPM
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: 'https://registry.npmjs.org'

      # ✅ Extract version and major number from package.json
      - name: Extract and validate version
        id: version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Parsed version: $VERSION"

          if [[ ! "$VERSION" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z.]+)?$ ]]; then
            echo "❌ Invalid semver version in package.json: $VERSION"
            exit 1
          fi

          MAJOR=$(echo "$VERSION" | cut -d. -f1)
          echo "major=$MAJOR" >> $GITHUB_OUTPUT

      - name: Compute dist-tag (lts for stable, next for prerelease)
        id: disttag
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR="${{ steps.version.outputs.major }}"
          if [[ "$VERSION" == *-* ]]; then
            echo "tag=v${MAJOR}-next" >> $GITHUB_OUTPUT
          else
            echo "tag=v${MAJOR}-lts" >> $GITHUB_OUTPUT
          fi
          echo "Using dist-tag=$(grep -o 'tag=.*' $GITHUB_OUTPUT || true)"

      # ✅ Skip publish if version already exists on NPM
      - name: Check if version already published
        id: check-npm
        run: |
          EXISTS=$(npm view @gov-cy/govcy-express-services@${{ steps.version.outputs.version }} version || echo "none")
          if [ "$EXISTS" == "${{ steps.version.outputs.version }}" ]; then
            echo "⚠️ Version already published: $EXISTS"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      # ✅ Install only if publishing
      - name: Install dependencies
        if: steps.check-npm.outputs.skip == 'false'
        run: npm ci

      # ✅ Publish to NPM under dist-tag 'v0' or 'v1'
      - name: Publish to NPM
        if: steps.check-npm.outputs.skip == 'false'
        run: npm publish --access public --tag ${{ steps.disttag.outputs.tag }}
        # run: npm publish --access public --tag v${{ steps.version.outputs.major }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # ✅ Zip source folder
      - name: Zip source
        if: steps.check-npm.outputs.skip == 'false'
        run: zip -r src.zip src

      # ✅ Create GitHub release with zipped asset
      - name: Create GitHub Release
        if: steps.check-npm.outputs.skip == 'false'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: src.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # ✅ If skipped, log it clearly
      - name: Log skipped publish
        if: steps.check-npm.outputs.skip == 'true'
        run: |
            echo "✅ Skipping: Version ${{ steps.version.outputs.version }} already on npm."