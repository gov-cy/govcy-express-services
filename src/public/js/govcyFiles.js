// 🔍 Select all file inputs that have the .govcy-file-upload class
var fileInputs = document.querySelectorAll('input[type="file"].govcy-file-upload');

// 🔁 Loop over each file input and attach a change event listener
fileInputs.forEach(function(input) {
  input.addEventListener('change', _uploadFileEventHandler);
});


/**
 * Handles the upload of a file event
 * 
 * @param {object} event The event
 */
async function _uploadFileEventHandler(event) {
  var input = event.target;
  var messages = {
      "uploadSuccesful": {
        "el": "Το αρχείο ανεβαστηκε",
        "en": "File uploaded successfully",
        "tr": "File uploaded successfully"
      },
      "uploadFailed": {
        "el": "Αποτυχια ανεβασης",
        "en": "File upload failed",
        "tr": "File upload failed"
      },
      "uploadFailed406": {
        "el": "Το επιλεγμένο αρχείο είναι κενό",
        "en": "The selected file is empty",
        "tr": "The selected file is empty"
      },
      "uploadFailed407": {
        "el": "Το επιλεγμένο αρχείο πρέπει να είναι JPG, JPEG, PNG ή PDF",
        "en": "The selected file must be a JPG, JPEG, PNG or PDF",
        "tr": "The selected file must be a JPG, JPEG, PNG or PDF"
      },
      "uploadFailed408": {
        "el": "Το επιλεγμένο αρχείο πρέπει να είναι JPG, JPEG, PNG ή PDF",
        "en": "The selected file must be a JPG, JPEG, PNG or PDF",
        "tr": "The selected file must be a JPG, JPEG, PNG or PDF"
      },
      "uploadFailed409": {
        "el": "Το επιλεγμένο αρχείο πρέπει να είναι μικρότερο από 5MB",
        "en": "The selected file must be smaller than 5MB",
        "tr": "The selected file must be smaller than 5MB"
      }
    };
    // 🔐 Get the CSRF token from a hidden input field (generated by your backend)
    var csrfEl = document.querySelector('input[type="hidden"][name="_csrf"]');
    var csrfToken = csrfEl ? csrfEl.value : '';

    // 🔧 Define siteId and pageUrl (you can dynamically extract these later)
    var siteId = window._govcySiteId || "";
    var pageUrl = window._govcyPageUrl || "";
    var lang = window._govcyLang || "el";
    // 📦 Grab the selected file
    var file = event.target.files[0];
    var elementName = input.name; // Form field's `name` attribute
    var elementId = input.id; // Form field's `id` attribute

    if (!file) return; // Exit if no file was selected

    // 🧵 Prepare form-data payload for the API
    var formData = new FormData();
    formData.append('file', file);                  // Attach the actual file
    formData.append('elementName', elementName);    // Attach the field name for backend lookup

    try {
      // 🚀 Send file to the backend upload API
      var response = await axios.post(`/apis/${siteId}/${pageUrl}/upload`, formData, {
        headers: {
          'X-CSRF-Token': csrfToken // 🔐 Pass CSRF token in custom header
        }
      });

      var sha256 = response.data.Data.sha256;
      var fileId = response.data.Data.fileId;

      // 📝 Store returned metadata in hidden fields for submission with the form
      // document.querySelector('[name="' + elementName + 'Attachment[fileId]"]').value = fileId;
      // document.querySelector('[name="' + elementName + 'Attachment[sha256]"]').value = sha256;

      // Render the file view
      _renderFileElement("fileView", elementId, elementName, fileId, sha256, null);
      
      // Accessibility: Update ARIA live region with success message
      var statusRegion = document.getElementById('_govcy-upload-status');
      if (statusRegion) {
        setTimeout(function() {
          statusRegion.textContent = messages.uploadSuccesful[lang];
        }, 200)
        setTimeout(function() {
          statusRegion.textContent = '';
        }, 5000); 
      }
      // alert('✅ File uploaded successfully');

    } catch (err) {
      // ⚠️ Show an error message if upload fails
      var errorMessage = messages.uploadFailed;
      var errorCode = err && err.response && err.response.data && err.response.data.ErrorCode;

      if (errorCode === 406 || errorCode === 407 || errorCode === 408 || errorCode === 409) {
        errorMessage = messages["uploadFailed" + errorCode];
      }

      // Render the file input with error
      _renderFileElement("fileInput", elementId, elementName, "","", errorMessage);
      
      // Re-bind the file input's change handler
      var newInput = document.getElementById(elementId);
      if (newInput) {
        newInput.addEventListener('change', _uploadFileEventHandler);
      }

      // Accessibility: Focus on the form field
      document.getElementById(elementId)?.focus();
      
    }
}

/**
 * Renders a file element in the DOM
 * 
 * @param {string} elementState The element state. Can be "fileInput" or "fileView" 
 * @param {string} elementId The element id
 * @param {string} elementName The element name 
 * @param {string} fileId The file id 
 * @param {string} sha256 The sha256 
 * @param {object} errorMessage The error message in all supported languages 
 */
function _renderFileElement(elementState, elementId, elementName, fileId, sha256, errorMessage) {
  // Create an instance of GovcyFrontendRendererBrowser
  var renderer = new GovcyFrontendRendererBrowser();
  var lang = window._govcyLang || "el";
  // Define the input data
  var inputData =
  {
    "site": {
      "lang": lang
    }
  };
  var fileInputMap = window._govcyFileInputs || {};
  var fileElement = fileInputMap[elementName];
  fileElement.element = elementState;
  if (errorMessage != null) fileElement.params.error = errorMessage;
  if (fileId != null) fileElement.params.fileId = fileId;
  if (sha256 != null) fileElement.params.sha256 = sha256;
  if (elementState == "fileView") {
    fileElement.params.visuallyHiddenText = fileElement.params.label;
    // TODO: Also need to set the `view` and `download` URLs 
    fileElement.params.viewHref = "#viewHref";
    fileElement.params.deleteHref  = "#deleteHref";
  }
  // Construct the JSONTemplate
  var JSONTemplate = {
    "elements": [fileElement]
  };
  
  //render HTML into string
  var renderedHtml = renderer.renderFromJSON(JSONTemplate,inputData);
  var outerElement = document.getElementById(`${elementId}-outer-control`) 
        || document.getElementById(`${elementId}-input-control`) 
        || document.getElementById(`${elementId}-view-control`);

  if (outerElement) {
    //remove all classes from outerElement
    outerElement.className = "";
    //set the id of the outerElement to `${elementId}-outer-control`
    outerElement.id = `${elementId}-outer-control`;
    //update DOM and initialize the JS components
    renderer.updateDOMAndInitialize(`${elementId}-outer-control`, renderedHtml);
  }
}