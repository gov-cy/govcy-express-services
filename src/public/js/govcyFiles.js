// 🔍 Select all file inputs that have the .govcy-file-upload class
const fileInputs = document.querySelectorAll('input[type="file"].govcy-file-upload');

// 🔁 Loop over each file input and attach a change event listener
fileInputs.forEach(input => {
  input.addEventListener('change', async (event) => {
    const messages = {
      "uploadSuccesful": {
        "el": "Το αρχείο ανεβαστηκε",
        "en": "File uploaded successfully",
        "tr": "File uploaded successfully"
      },
      "uploadFailed": {
        "el": "Αποτυχια ανεβασης",
        "en": "File upload failed",
        "tr": "File upload failed"
      }
    };
    // 🔐 Get the CSRF token from a hidden input field (generated by your backend)
    const csrfToken = document.querySelector('input[type="hidden"][name="_csrf"]')?.value;
    // 🔧 Define siteId and pageUrl (you can dynamically extract these later)
    const siteId = window._govcySiteId || "";
    const pageUrl = window._govcyPageUrl || "";
    const lang = window._govcyLang || "el";
    // 📦 Grab the selected file
    const file = event.target.files[0];
    const elementName = input.name; // Form field's `name` attribute

    if (!file) return; // Exit if no file was selected

    // 🧵 Prepare form-data payload for the API
    const formData = new FormData();
    formData.append('file', file);                  // Attach the actual file
    formData.append('elementName', elementName);    // Attach the field name for backend lookup

    try {
      // 🚀 Send file to the backend upload API
      const response = await axios.post(`/apis/${siteId}/${pageUrl}/upload`, formData, {
        headers: {
          'X-CSRF-Token': csrfToken // 🔐 Pass CSRF token in custom header
        }
      });

      const { sha256, fileId } = response.data.Data;

      // 📝 Store returned metadata in hidden fields for submission with the form
      document.querySelector(`[name="${elementName}Attachment[fileId]"`).value = fileId;
      document.querySelector(`[name="${elementName}Attachment[sha256]"`).value = sha256;

      // ✅ Success
      // Create an instance of GovcyFrontendRendererBrowser
      const renderer = new GovcyFrontendRendererBrowser();
      // Define the input data
        const inputData =
        {
          "site": {
            "lang": lang
          }
        };

        const fileInputMap = window._govcyFileInputs || {};
        let fileElement = fileInputMap[elementName];
        fileElement.element = "fileView";
        fileElement.params.fileId = fileId;
        fileElement.params.sha256 = sha256;
        fileElement.params.visuallyHiddenText = fileElement.params.label;
        fileElement.params.error = null;
        // TODO: Also need to set the `view` and `download` URLs 
        fileElement.params.viewHref = "#viewHref";
        fileElement.params.deleteHref  = "#deleteHref";
        // Construct the JSONTemplate
        const JSONTemplate = {
          "elements": [fileElement]
        };
        
        //render HTML into string
        let renderedHtml = renderer.renderFromJSON(JSONTemplate,inputData);
        // look for element with id `${elementName}-outer-control`
        // if not found look for element with id `${elementName}-input-control`
        // if not found look for element with id `${elementName}-view-control`
        var outerElement = document.getElementById(`${elementName}-outer-control`) 
        || document.getElementById(`${elementName}-input-control`) 
        || document.getElementById(`${elementName}-view-control`);

        if (outerElement) {
          //remove all classes from outerElement
          outerElement.className = "";
          //set the id of the outerElement to `${elementName}-outer-control`
          outerElement.id = `${elementName}-outer-control`;
          //update DOM and initialize the JS components
          renderer.updateDOMAndInitialize(`${elementName}-outer-control`, renderedHtml);
        }
        // ✅ Update ARIA live region with success message
        const statusRegion = document.getElementById('_govcy-upload-status');
        if (statusRegion) {
          statusRegion.textContent = messages.uploadSuccesful[lang];
          setTimeout(() => {
            statusRegion.textContent = '';
          }, 10000);
        }
      // alert('✅ File uploaded successfully');

    } catch (err) {
      // Create an instance of GovcyFrontendRendererBrowser
      const renderer = new GovcyFrontendRendererBrowser();
      const lang = window._govcyLang || "el";
      // Define the input data
      const inputData =
      {
        "site": {
          "lang": lang
        }
      };
      const fileInputMap = window._govcyFileInputs || {};
      let fileElement = fileInputMap[elementName];
      fileElement.element = "fileInput";
      fileElement.params.fileId = "";
      fileElement.params.sha256 = ""
      fileElement.params.error = messages.uploadFailed;

      // Construct the JSONTemplate
      const JSONTemplate = {
        "elements": [fileElement]
      };
      //render HTML into string
      let renderedHtml = renderer.renderFromJSON(JSONTemplate,inputData);
      var outerElement = document.getElementById(`${elementName}-outer-control`) 
        || document.getElementById(`${elementName}-input-control`) 
        || document.getElementById(`${elementName}-view-control`);

      if (outerElement) {
        //remove all classes from outerElement
        outerElement.className = "";
        //set the id of the outerElement to `${elementName}-outer-control`
        outerElement.id = `${elementName}-outer-control`;
        //update DOM and initialize the JS components
        renderer.updateDOMAndInitialize(`${elementName}-outer-control`, renderedHtml);
        //TODO: Kamran need to figure a way to re register the DOM event on change
      }
      // ✅ Update ARIA live region with success message
      const statusRegion = document.getElementById('_govcy-upload-error');
      if (statusRegion) {
        statusRegion.textContent = messages.uploadFailed[lang];
        setTimeout(() => {
          statusRegion.textContent = '';
        }, 10000);
      }
      // // ⚠️ Show an error message if upload fails
      // alert('❌ Upload failed: ' + (err.response?.data?.error || err.message));
    }
  });
});
