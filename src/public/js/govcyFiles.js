// 🔍 Select all file inputs that have the .govcy-file-upload class
const fileInputs = document.querySelectorAll('input[type="file"].govcy-file-upload');

// 🔐 Get the CSRF token from a hidden input field (generated by your backend)
const csrfToken = document.querySelector('input[type="hidden"][name="_csrf"]')?.value;

// 🔧 Define siteId and pageUrl (you can dynamically extract these later)
const siteId = 'test';
const pageUrl = 'data-entry-all';

// 🔁 Loop over each file input and attach a change event listener
fileInputs.forEach(input => {
  input.addEventListener('change', async (event) => {
    // 📦 Grab the selected file
    const file = event.target.files[0];
    const elementName = input.name; // Form field's `name` attribute

    if (!file) return; // Exit if no file was selected

    // 🧵 Prepare form-data payload for the API
    const formData = new FormData();
    formData.append('file', file);                  // Attach the actual file
    formData.append('elementName', elementName);    // Attach the field name for backend lookup

    try {
      // 🚀 Send file to the backend upload API
      const response = await axios.post(`/${siteId}/${pageUrl}/upload`, formData, {
        headers: {
          'X-CSRF-Token': csrfToken // 🔐 Pass CSRF token in custom header
        }
      });

      const { sha256, fileId } = response.data.Data;

      // 📝 Store returned metadata in hidden fields for submission with the form
      document.querySelector(`[name="${elementName}Attachment[fileId]"`).value = fileId;
      document.querySelector(`[name="${elementName}Attachment[sha256]"`).value = sha256;

      alert('✅ File uploaded successfully');

    } catch (err) {
      // ⚠️ Show an error message if upload fails
      alert('❌ Upload failed: ' + (err.response?.data?.error || err.message));
    }
  });
});
